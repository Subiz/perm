package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	typeName = flag.String("type", "", "permission type")
	fileName = flag.String("file", "", "pb.go file to parse")
	output   = flag.String("output", "", "output file name; default srcdir/<type>_string.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of stringer:\n")
	fmt.Fprintf(os.Stderr, "\tpermgen [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tpermgen [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "For more information, see:\n")
	fmt.Fprintf(os.Stderr, "\thttp://godoc.org/golang.org/x/tools/cmd/stringer\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("permgen: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeName) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	if len(*fileName) == 0 {
		flag.Usage()
		os.Exit(2)
	}

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	g := Generator{}

	// Print the header and package clause.
	g.Printf("// Code generated by \"perm_generator %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf(`
package perm

import "git.subiz.net/header/auth"
`)
	src, err := ioutil.ReadFile(*fileName)
	if err != nil {
		log.Fatalf("reading input: %s", err)
	}
	// Run generate for each type.
	g.generate(string(src), *typeName)

	// Format the output.
	src = g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_checker.go", *typeName)
		outputName = filepath.Join(".", strings.ToLower(baseName))
	}
	if err := ioutil.WriteFile(outputName, src, 0644); err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// generate produces the String method for the named type.
func (g *Generator) generate(src, typeName string) {
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, "", src, 0)
	if err != nil {
		log.Fatalf("parsing file: %s", err)
	}

	fieldNames := make([]string, 0, 100)
	// Set the state for this run of the walker.
	for _, itypeDecl := range file.Decls {
		typeDecl, ok := itypeDecl.(*ast.GenDecl)
		if !ok {
			continue
		}

		// filter out type
		structDecl, ok := typeDecl.Specs[0].(*ast.TypeSpec)
		if !ok {
			continue
		}
		if structDecl.Name.Name != typeName {
			continue
		}

		fields := structDecl.Type.(*ast.StructType).Fields.List
		for _, field := range fields {
			nameExpr := field.Names[0]
			start := nameExpr.Pos() - 1
			end := nameExpr.End() - 1
			// grab it in source
			fieldName := src[start:end]
			fieldNames = append(fieldNames, fieldName)
		}
		break
	}

	if len(fieldNames) == 0 {
		log.Fatalf("no fields defined for type %s", typeName)
	}
	g.buildMultipleRuns(fieldNames, typeName)
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// Value represents a declared constant.
type Value struct {
	name string // The name of the constant.
	// The value is stored as a bit pattern alone. The boolean tells us
	// whether to interpret it as an int64 or a uint64; the only place
	// this matters is when sorting.
	// Much of the time the str field is all we need; it is printed
	// by Value.String.
	value  uint64 // Will be converted to int64 when needed.
	signed bool   // Whether the constant is a signed type.
	str    string // The string representation given by the "go/constant" package.
}

// buildMultipleRuns generates the variables and String method for multiple runs of contiguous values.
// For this pattern, a single Printf format won't do.
func (g *Generator) buildMultipleRuns(fieldNames []string, typeName string) {

	g.Printf("\n")

	for _, name := range fieldNames {
		g.Printf(`func CheckCreate%s(cred *auth.Credential, accid string, agids ...string) error {
	p := "c"
	callerperm := cred.GetPerm().Get%s()
	base := Base.Get%s()
	return C2(p, base, callerperm, cred, accid, agids...)
}

func CheckRead%s(cred *auth.Credential, accid string, agids ...string) error {
	p := "r"
	callerperm := cred.GetPerm().Get%s()
	base := Base.Get%s()
	return C2(p, base, callerperm, cred, accid, agids...)
}

func CheckUpdate%s(cred *auth.Credential, accid string, agids ...string) error {
	p := "u"
	callerperm := cred.GetPerm().Get%s()
	base := Base.Get%s()
	return C2(p, base, callerperm, cred, accid, agids...)
}

func CheckDelete%s(cred *auth.Credential, accid string, agids ...string) error {
	p := "d"
	callerperm := cred.GetPerm().Get%s()
	base := Base.Get%s()
	return C2(p, base, callerperm, cred, accid, agids...)
}

`, name, name, name, name, name, name, name, name, name, name, name, name)
	}
}
